# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle
image: gradle:4.10

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=true"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle


stages:
  - test
  - build
  - release
  - publish

test:
  stage: test
  before_script:
    - echo "Starting test.."
  script:
    - echo "Starting test.."
    - gradle check
    - echo "Test is finished.."
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle
  after_script:
    - echo "Test is finished.."

build:
  stage: build
  before_script:
    - echo "Starting build.."
  script: gradle --build-cache assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 week
  only:
    - master
  after_script:
    - echo "Build is finished.."

release:
  stage: release
  before_script:
    - yarn install --frozen-lockfile
  image: node:8
  only:
    - master@<GROUP>/<PROJECT>
  script:
    - $(yarn bin)/semantic-release-gitlab


publish:
  image: inetprocess/gitlab-release
  stage: publish
  only:
    - tags
  script:
    - gitlab-release --message "Test" build/libs/*.jar

after_script:
  - echo "All stages are done."
  - echo "Current tag; ${CI_COMMIT_TAG}"